apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "kotlin-android"

apply plugin: "com.facebook.react"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
]

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

def _nodeTargetSdkVersion = ((rootProject?.ext?.properties?.targetSdkVersion) ?: 22)
def _nodeMinSdkVersion = ((rootProject?.ext?.properties?.minSdkVersion) ?: 16)
def _compileNativeModulesSdkVersion = _nodeMinSdkVersion
if (_compileNativeModulesSdkVersion<21) {
    // 21 is the minimum sdk version Node is built with.
    _compileNativeModulesSdkVersion=21
}

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["arm64-v8a"]
}

def getNDK() {
    // Load local.properties
    Properties properties = new Properties()
    def localPropertiesFile = rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        properties.load(localPropertiesFile.newDataInputStream())
    }

    // Return ndk.dir if it exists
    def localNDK = properties['ndk.path']
    if (localNDK) {
        return localNDK
    }

    // If ndk.dir doesn't exist, check for NDK_PATH in gradle.properties
    return rootProject.ext.has('NDK_PATH') ? rootProject.ext.get('NDK_PATH') : null
}

def ndkDirectory = getNDK()

android {
    ndkPath ndkDirectory

    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86/libfbjni.so'
        pickFirst 'lib/x86_64/libfbjni.so'
        pickFirst 'lib/armeabi-v7a/libfbjni.so'
        pickFirst 'lib/arm64-v8a/libfbjni.so'

        jniLibs {
            useLegacyPackaging = true
        }
    }

    namespace "com.quietmobile"

    defaultConfig {
        applicationId "com.quietmobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 409
        versionName "2.1.2-alpha.13"
        resValue "string", "build_config_package", "com.quietmobile"
        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        ndk {
            abiFilters "arm64-v8a"
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('STORE_FILE')) {
                storeFile file(STORE_FILE)
                storePassword STORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            } else {
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    sourceSets {
        main.assets.srcDirs += '../install/resources/nodejs-modules'
    }
    flavorDimensions "version"
    productFlavors {
        storybook {
            applicationIdSuffix ".storybook"
            versionNameSuffix "-storybook"
            dimension "version"
        }
        standard {
            dimension "version"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["arm64-v8a": 1]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
}

dependencies {
    androidTestImplementation('com.wix:detox:+')
    implementation 'androidx.appcompat:appcompat:1.1.0'

    implementation fileTree(dir: "libs", include: ["*.jar", '*.so'])

    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    implementation("com.facebook.react:flipper-integration")

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    if (enableHermes) {
        //noinspection GradleDynamicVersion
        implementation("com.facebook.react:hermes-engine:+") { // From node_modules
            exclude group:'com.facebook.fbjni'
        }
    } else {
        implementation jscFlavor
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.core:core-ktx:1.9.0"

    implementation 'com.google.code.gson:gson:2.9.1'

    implementation project(':react-native-fs')

    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    // implementation 'info.guardianproject:tor-android:0.4.5.7'
    implementation 'info.guardianproject:jtorctl:0.4.5.7'

    // Websockets connection
    implementation ('io.socket:socket.io-client:2.0.0') {
        exclude group: 'org.json', module: 'json'
    }

    // Work manager
    implementation("androidx.work:work-runtime:2.7.1")
    implementation("androidx.work:work-runtime-ktx:2.7.1")

    // For animated GIF support
    implementation 'com.facebook.fresco:fresco:2.6.0'
    implementation 'com.facebook.fresco:animated-gif:2.6.0'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

// Additional configuration
project.ext.envConfigFiles = [
    debug: ".env.development",
    storybook: ".env.storybook",
    release: ".env.staging",
    prod: ".env.production",
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

repositories {
    mavenCentral()
}

task CopyNodeProjectAssetsFolder (type:Copy) {
    description "Copies the Node Project to a build folder for manipulation."

    from "${rootProject.projectDir}/../nodejs-assets/deps/android"
    into "${rootProject.buildDir}/nodejs-assets/nodejs-project/deps/android"

    from "${rootProject.projectDir}/../nodejs-assets/nodejs-project"
    into "${rootProject.buildDir}/nodejs-assets/nodejs-project/"
    exclude '**/*~' // temporary files
    exclude '**/.*' // files and dirs starting with .
    exclude '**/*.gz' // gzip files will cause errors on aapt when merging assets.
}

task GenerateNodeProjectAssetsLists {
    dependsOn "CopyNodeProjectAssetsFolder"
    description "Generates a list for runtime copying"
    inputs.dir "${rootProject.buildDir}/nodejs-assets/"
    outputs.file "${rootProject.buildDir}/nodejs-assets/file.list"
    outputs.file "${rootProject.buildDir}/nodejs-assets/dir.list"
    doLast{
        delete "${rootProject.buildDir}/nodejs-assets/file.list"
        delete "${rootProject.buildDir}/nodejs-assets/dir.list"

        ArrayList<String> file_list_arr = new ArrayList<String>();
        ArrayList<String> dir_list_arr = new ArrayList<String>();
        String file_list = "";
        String dir_list = "";

        def assets_tree = fileTree(dir: "${rootProject.buildDir}/nodejs-assets/")
        assets_tree.include('nodejs-project/**') // Include the node project.
        assets_tree.exclude('**/.*') // Exclude files and dirs starting with .
        assets_tree.exclude('**/*~') // Exclude temporary files.
        assets_tree.visit { assetFile ->
            if (assetFile.isDirectory()) {
                dir_list_arr.add("${assetFile.relativePath}\n");
            } else {
                file_list_arr.add("${assetFile.relativePath}\n");
            }
        }

        //Ensure both files are ordered similarly across builds.
        Collections.sort(file_list_arr);
        Collections.sort(dir_list_arr);

        def file_list_path = new File( "${rootProject.buildDir}/nodejs-assets/file.list")
        for (String file : file_list_arr){
            file_list += file;
        }
        file_list_path.write file_list

        def dir_list_path = new File( "${rootProject.buildDir}/nodejs-assets/dir.list")
        for (String dir : dir_list_arr){
            dir_list += dir;
        }
        dir_list_path.write dir_list
    }
}

project.android.sourceSets.main.assets.srcDirs+="${rootProject.buildDir}/nodejs-assets/"

tasks.getByPath(":${project.name}:preBuild").dependsOn GenerateNodeProjectAssetsLists

def abi_name = 'arm64'

task "GenerateNodeNativeAssetsLists${abi_name}" {
    description "Generates a list for runtime copying"
    mkdir "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/"
    copy {
        from "${rootProject.buildDir}/nodejs-assets/deps/"
        into "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/deps/"
    }
    inputs.dir "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/"
    outputs.file "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/file.list"
    outputs.file "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/dir.list"
    doLast{
        if(!(new File("${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/")).exists()) {
            // If the native assets folder doesn't exist from the copy task, skip the creation of the file.list
            return;
        }
        delete "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/file.list"
        delete "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/dir.list"
        String file_list = "";
        String dir_list = "";

        def assets_tree = fileTree(dir: "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/" )
        assets_tree.visit { assetFile ->
            if (assetFile.isDirectory()) {
                dir_list+="${assetFile.relativePath}\n"
            } else {
                file_list+="${assetFile.relativePath}\n"
            }
        }
        def file_list_path = new File( "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/file.list")
        file_list_path.write file_list
        def dir_list_path = new File( "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/dir.list")
        dir_list_path.write dir_list
    }
}

tasks.getByPath(":${project.name}:preBuild").dependsOn "GenerateNodeNativeAssetsLists${abi_name}"

project.android.sourceSets.main.assets.srcDirs+="${rootProject.buildDir}/nodejs-native-assets/"
