apply plugin: "com.android.application"
apply plugin: 'kotlin-android'

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

def _nodeTargetSdkVersion = ((rootProject?.ext?.properties?.targetSdkVersion) ?: 22)
def _nodeMinSdkVersion = ((rootProject?.ext?.properties?.minSdkVersion) ?: 16)
def _compileNativeModulesSdkVersion = _nodeMinSdkVersion
if (_compileNativeModulesSdkVersion<21) {
    // 21 is the minimum sdk version Node is built with.
    _compileNativeModulesSdkVersion=21
}

android {
    ndkPath NDK_PATH

    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.zbaymobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 122
        versionName "0.5.4-alpha.2"
        resValue "string", "build_config_package", "com.zbaymobile"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "arm64-v8a"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('STORE_FILE')) {
                storeFile file(STORE_FILE)
                storePassword STORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            } else {
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    sourceSets {
        main.assets.srcDirs += '../install/resources/nodejs-modules'
    }
    flavorDimensions "version"
    productFlavors {
        storybook {
            applicationIdSuffix ".storybook"
            versionNameSuffix "-storybook"
            dimension "version"
        }
        standard {
            dimension "version"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "arm64-v8a": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", '*.so'])
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.core:core-ktx:$kotlin_version"

    implementation 'com.google.code.gson:gson:2.9.1'

    implementation project(':react-native-fs')

    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    api 'info.guardianproject:jtorctl:0.4.5.7'
    // implementation 'info.guardianproject:tor-android:0.4.5.7'

    implementation 'org.torproject:tor-android-binary:0.4.4.6'

    // Websockets connection
    implementation ('io.socket:socket.io-client:2.0.0') {
        exclude group: 'org.json', module: 'json'
    }

    // Work manager
    implementation("androidx.work:work-runtime:2.7.1")
    implementation("androidx.work:work-runtime-ktx:2.7.1")
    
    // For animated GIF support
    implementation 'com.facebook.fresco:fresco:2.6.0'
    implementation 'com.facebook.fresco:animated-gif:2.6.0'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

// Additional configuration
project.ext.envConfigFiles = [
    debug: ".env.development",
    storybook: ".env.storybook",
    release: ".env.staging",
    prod: ".env.production",
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

repositories {
    mavenCentral()
}

task CopyNodeProjectAssetsFolder (type:Sync) {
    description "Copies the Node Project to a build folder for manipulation."
    from "${rootProject.projectDir}/../nodejs-assets/nodejs-project"
    into "${rootProject.buildDir}/nodejs-assets/nodejs-project/"
    exclude '**/*~' // temporary files
    exclude '**/.*' // files and dirs starting with .
    exclude '**/*.gz' // gzip files will cause errors on aapt when merging assets.
}

task GenerateNodeProjectAssetsLists {
    dependsOn "CopyNodeProjectAssetsFolder"
    description "Generates a list for runtime copying"
    inputs.dir "${rootProject.buildDir}/nodejs-assets/"
    outputs.file "${rootProject.buildDir}/nodejs-assets/file.list"
    outputs.file "${rootProject.buildDir}/nodejs-assets/dir.list"
    doLast{
        delete "${rootProject.buildDir}/nodejs-assets/file.list"
        delete "${rootProject.buildDir}/nodejs-assets/dir.list"

        ArrayList<String> file_list_arr = new ArrayList<String>();
        ArrayList<String> dir_list_arr = new ArrayList<String>();
        String file_list = "";
        String dir_list = "";

        def assets_tree = fileTree(dir: "${rootProject.buildDir}/nodejs-assets/")
        assets_tree.include('nodejs-project/**') // Include the node project.
        assets_tree.exclude('**/.*') // Exclude files and dirs starting with .
        assets_tree.exclude('**/*~') // Exclude temporary files.
        assets_tree.visit { assetFile ->
            if (assetFile.isDirectory()) {
                dir_list_arr.add("${assetFile.relativePath}\n");
            } else {
                file_list_arr.add("${assetFile.relativePath}\n");
            }
        }

        //Ensure both files are ordered similarly across builds.
        Collections.sort(file_list_arr);
        Collections.sort(dir_list_arr);

        def file_list_path = new File( "${rootProject.buildDir}/nodejs-assets/file.list")
        for (String file : file_list_arr){
            file_list += file;
        }
        file_list_path.write file_list

        def dir_list_path = new File( "${rootProject.buildDir}/nodejs-assets/dir.list")
        for (String dir : dir_list_arr){
            dir_list += dir;
        }
        dir_list_path.write dir_list
    }
}

project.android.sourceSets.main.assets.srcDirs+="${rootProject.buildDir}/nodejs-assets/"

tasks.getByPath(":${project.name}:preBuild").dependsOn GenerateNodeProjectAssetsLists

import org.gradle.internal.os.OperatingSystem

String shouldRebuildNativeModules = System.getenv('NODEJS_MOBILE_BUILD_NATIVE_MODULES');

if (shouldRebuildNativeModules==null) {
// If the environment variable is not set right now, check if it has been saved to a file.
    def nativeModulesPreferenceFile = file("${rootProject.projectDir}/../nodejs-assets/BUILD_NATIVE_MODULES.txt");
    if (nativeModulesPreferenceFile.exists()) {
        shouldRebuildNativeModules=nativeModulesPreferenceFile.text.trim();
    }
}

if (shouldRebuildNativeModules==null) {
// If build native modules preference is not set, try to find .gyp files to turn it on.
    shouldRebuildNativeModules="0";
    def gyp_files_tree = fileTree(
            dir: "${rootProject.projectDir}/../nodejs-assets/nodejs-project",
            include: "**/*.gyp"
    );
    gyp_files_tree.visit { gypFile ->
        if (!gypFile.isDirectory()) {
            // It's a .gyp file.
            shouldRebuildNativeModules="1";
            gypFile.stopVisiting();
        }
    }
}

if ("1".equals(shouldRebuildNativeModules)) {

    String npmCommandName = 'npm';
    String nodeCommandName = 'node';
    if (OperatingSystem.current().isMacOsX()) {
        // On macOS, npm's and node's locations may not be in the PATH environment variable if gradle is being run
        // by Android Studio. We need npm to build native modules and node to run node-pre-gyp patches, so we use
        // helper scripts that are created when the plugin is installed to run npm and node with the PATH members that
        // were available during the plugin's install.
        try {
            def commandResult = exec {
                commandLine 'command', '-v', 'npm'
                ignoreExitValue = true
            }
            if ( commandResult.getExitValue() != 0 ) {
                // If npm is not found by command, use the helper script.
                logger.warn("Couldn't find npm in the PATH for building native modules. Will try to use a helper script.");
                npmCommandName = '../build-native-modules-MacOS-helper-script-npm.sh';
            }
            commandResult = exec {
                commandLine 'command', '-v', 'node'
                ignoreExitValue = true
            }
            if ( commandResult.getExitValue() != 0 ) {
                // If node is not found by command, use the helper script.
                logger.warn("Couldn't find node in the PATH for building native modules. Will try to use a helper script.");
                nodeCommandName = '../build-native-modules-MacOS-helper-script-node.sh';
            }
        } catch ( Exception e ) {
            throw new GradleException('Something went wrong looking for npm and node by running "command".', e)
        }
    }

    task ApplyPatchScriptToModules (type:Exec) {
        dependsOn "CopyNodeProjectAssetsFolder"
        description "Apply patches to modules to improve compatibility."
        doFirst {
            if (OperatingSystem.current().isMacOsX()) {
                // Copy the helper script for calling node when building in Android Studio on macOS.
                copy {
                    from "${rootProject.projectDir}/../nodejs-assets/build-native-modules-MacOS-helper-script-node.sh"
                    into "${rootProject.buildDir}/nodejs-assets/"
                }
            }
        }
        workingDir "${rootProject.buildDir}/nodejs-assets/nodejs-project/"
        commandLine nodeCommandName, "${project.projectDir}/../../scripts/patch-package.js", "${rootProject.buildDir}/nodejs-assets/nodejs-project/node_modules/"
        doLast {
            if (OperatingSystem.current().isMacOsX()) {
                // Deletes the helper script so it doesn't get included in the APK.
                delete "${rootProject.buildDir}/nodejs-assets/build-native-modules-MacOS-helper-script-node.sh"
            }
        }
    }
    GenerateNodeProjectAssetsLists.dependsOn "ApplyPatchScriptToModules"

    def nativeModulesABIs = android.defaultConfig.ndk.abiFilters
    if (nativeModulesABIs == null) {
        // No abiFilter is defined for the build. Build native modules for eevery architecture.
        nativeModulesABIs = ["armeabi-v7a", "arm64-v8a"] as Set<String>;
    }

    nativeModulesABIs.each { abi_name ->
        String temp_arch = {
            switch (abi_name) {
                case 'armeabi-v7a':
                    'arm'
                    break
                case 'arm64-v8a':
                    'arm64'
                    break
                default:
                    abi_name
                    break
            }
        }()
        String temp_cc_ver = '4.9';
        String temp_dest_cpu;
        String temp_v8_arch;
        String temp_binutils_prefix;
        String temp_compiler_prefix;
        String cargo_build_target;
        switch ( temp_arch )
        {
            case 'arm':
                temp_dest_cpu = "${temp_arch}"
                temp_v8_arch = "${temp_arch}"
                temp_binutils_prefix = "arm-linux-androideabi"
                temp_compiler_prefix = "armv7a-linux-androideabi${_compileNativeModulesSdkVersion}"
                cargo_build_target = 'arm-linux-androideabi'
                break
            case 'x86':
                temp_dest_cpu = 'ia32'
                temp_v8_arch = 'ia32'
                temp_binutils_prefix = "i686-linux-android"
                temp_compiler_prefix = "i686-linux-android${_compileNativeModulesSdkVersion}"
                cargo_build_target = "i686-linux-android"
                break
            case 'x86_64':
                temp_dest_cpu = 'x64'
                temp_v8_arch = 'x64'
                temp_binutils_prefix = "x86_64-linux-android"
                temp_compiler_prefix = "x86_64-linux-android${_compileNativeModulesSdkVersion}"
                cargo_build_target = "x86_64-linux-android"
                break
            case 'arm64':
                temp_dest_cpu = "${temp_arch}"
                temp_v8_arch = "${temp_arch}"
                temp_binutils_prefix = "aarch64-linux-android"
                temp_compiler_prefix = "aarch64-linux-android${_compileNativeModulesSdkVersion}"
                cargo_build_target = "aarch64-linux-android"
                break
            default:
                throw new GradleException("Unsupported architecture for nodejs-mobile native modules: ${temp_arch}")
                break
        }

        String temp_host_tag
        if (OperatingSystem.current().isMacOsX()) {
            temp_host_tag = 'darwin-x86_64'
        } else if (OperatingSystem.current().isLinux()) {
            temp_host_tag = 'linux-x86_64'
        } else {
            throw new GradleException("Unsupported operating system for nodejs-mobile native builds: ${OperatingSystem.current().getName()}")
        }

        String ndk_bundle_path = android.ndkDirectory
        String toolchain_path = "${ndk_bundle_path}/toolchains/llvm/prebuilt/${temp_host_tag}"
        String npm_toolchain_ar = "${toolchain_path}/bin/${temp_binutils_prefix}-ar"
        String npm_toolchain_cc = "${toolchain_path}/bin/${temp_compiler_prefix}-clang"
        String npm_toolchain_cxx = "${toolchain_path}/bin/${temp_compiler_prefix}-clang++"
        String npm_toolchain_link = "${toolchain_path}/bin/${temp_compiler_prefix}-clang++"
        String cargo_target_triple = cargo_build_target.toUpperCase().replaceAll('-', '_')

        String npm_gyp_defines = "target_arch=${temp_arch}"
        npm_gyp_defines += " v8_target_arch=${temp_v8_arch}"
        npm_gyp_defines += " android_target_arch=${temp_arch}"
        if (OperatingSystem.current().isMacOsX()) {
            npm_gyp_defines += " host_os=mac OS=android"
        } else if (OperatingSystem.current().isLinux()) {
            npm_gyp_defines += " host_os=linux OS=android"
        } else {
            throw new GradleException("Unsupported opperating system for nodejs-mobile native builds: ${OperatingSystem.current().getName()}")
        }

        task "CopyNodeProjectAssets${abi_name}" {
            description = "Copying node assets and apply patches to build native modules for ${abi_name}."
            inputs.files fileTree (
                    dir: "${rootProject.projectDir}/../nodejs-assets/nodejs-project/"
            ).exclude({
                details -> // We shouldn't need to rebuild native code if there are only changes in the Node.js project javascript files.
                    !details.isDirectory() &&
                            details.getPath().endsWith('.js') &&
                            !details.getPath().startsWith('node_modules/')
            })
            outputs.file "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/copy.timestamp"
            doLast {
                delete "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/"
                copy {
                    from "${rootProject.projectDir}/../nodejs-assets/nodejs-project/"
                    into "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/"
                    // Symlinks to binaries will be resolved by Gradle during the copy, causing build time errors.
                    // The original project's .bin folder will be added to the path while building in the BuildNpmModules tasks.
                    exclude "**/.bin"
                }
                if (OperatingSystem.current().isMacOsX()) {
                    // Copy the helper scripts for calling npm and node when building in Android Studio on macOS.
                    copy {
                        from "${rootProject.projectDir}/../nodejs-assets/build-native-modules-MacOS-helper-script-node.sh"
                        into "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/"
                    }
                    copy {
                        from "${rootProject.projectDir}/../nodejs-assets/build-native-modules-MacOS-helper-script-npm.sh"
                        into "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/"
                    }
                }
                exec {
                    workingDir "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/"
                    commandLine nodeCommandName, "${project.projectDir}/../../scripts/patch-package.js", "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/node_modules/"
                }
                new File("${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/copy.timestamp").text = "${new Date().format('yyyy-MM-dd HH:mm:ss')}"
            }
        }

        task "BuildNpmModules${abi_name}" (type:Exec) {
            dependsOn "CopyNodeProjectAssets${abi_name}"
            description = "Building native modules for ${abi_name}."
            inputs.file "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/copy.timestamp"
            outputs.dir "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/"
            workingDir "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/"
            commandLine npmCommandName, '--verbose', 'rebuild', '--build-from-source'
            environment ('npm_config_node_engine', 'v8' )
            environment ('npm_config_nodedir', "${project.projectDir}/libnode/" )
            String npm_gyp_path_to_use; // Check common paths for nodejs-mobile-gyp
            if ( file("${rootProject.projectDir}/../../nodejs-mobile-gyp/bin/node-gyp.js").exists() ) {
                npm_gyp_path_to_use = "${rootProject.projectDir}/../../nodejs-mobile-gyp/bin/node-gyp.js";
            } else {
                npm_gyp_path_to_use = "${rootProject.projectDir}/../node_modules/nodejs-mobile-gyp/bin/node-gyp.js";
            }
            environment ('npm_config_node_gyp', npm_gyp_path_to_use )
            environment ('npm_config_arch', temp_arch)
            environment ('npm_config_platform', 'android')
            environment ('npm_config_format', 'make-android')

            // Adds the original project .bin to the path. It's a workaround
            // to correctly build some modules that depend on symlinked modules,
            // like node-pre-gyp.
            String original_project_bin = "${rootProject.projectDir}/../nodejs-assets/nodejs-project/node_modules/.bin";
            if(file(original_project_bin).exists()) {
                environment ('PATH', "${original_project_bin}" + System.getProperty("path.separator") + "${System.env.PATH}")
            }

            environment ('CARGO_BUILD_TARGET', "${cargo_build_target}")
            environment ("CARGO_TARGET_${cargo_target_triple}_AR", "${npm_toolchain_ar}")
            environment ("CARGO_TARGET_${cargo_target_triple}_LINKER", "${npm_toolchain_link}")

            environment ('TOOLCHAIN',"${toolchain_path}")
            environment ('AR',"${npm_toolchain_ar}")
            environment ('CC',"${npm_toolchain_cc}")
            environment ('CXX',"${npm_toolchain_cxx}")
            environment ('LINK',"${npm_toolchain_link}")
            environment ('GYP_DEFINES',"${npm_gyp_defines}")
        }
        task "CopyBuiltNpmAssets${abi_name}" (type:Sync) {
            dependsOn "BuildNpmModules${abi_name}"
            description = "Copying node assets with build native modules for ${abi_name}."
            from "${rootProject.buildDir}/nodejs-native-assets-temp-build/nodejs-native-assets-${abi_name}/nodejs-project/"
            into "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/"
            includeEmptyDirs = false
            include '**/*.node'
        }

        task "GenerateNodeNativeAssetsLists${abi_name}" {
            dependsOn "CopyBuiltNpmAssets${abi_name}"
            description "Generates a list for runtime copying"
            inputs.dir "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/"
            outputs.file "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/file.list"
            outputs.file "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/dir.list"
            doLast{
                if(!(new File("${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/")).exists()) {
                    // If the native assets folder doesn't exist from the copy task, skip the creation of the file.list
                    return;
                }
                delete "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/file.list"
                delete "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/dir.list"
                String file_list = "";
                String dir_list = "";

                def assets_tree = fileTree(dir: "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/" )
                assets_tree.visit { assetFile ->
                    if (assetFile.isDirectory()) {
                        dir_list+="${assetFile.relativePath}\n"
                    } else {
                        file_list+="${assetFile.relativePath}\n"
                    }
                }
                def file_list_path = new File( "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/file.list")
                file_list_path.write file_list
                def dir_list_path = new File( "${rootProject.buildDir}/nodejs-native-assets/nodejs-native-assets-${abi_name}/dir.list")
                dir_list_path.write dir_list
            }
        }
        tasks.getByPath(":${project.name}:preBuild").dependsOn "GenerateNodeNativeAssetsLists${abi_name}"
    }
    project.android.sourceSets.main.assets.srcDirs+="${rootProject.buildDir}/nodejs-native-assets/"
}
